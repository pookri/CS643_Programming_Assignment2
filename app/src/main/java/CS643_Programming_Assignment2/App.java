/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CS643_Programming_Assignment2;

import org.apache.spark.ml.regression.LinearRegression;
import org.apache.spark.ml.regression.LinearRegressionModel;
import org.apache.spark.ml.regression.LinearRegressionTrainingSummary;
import org.apache.spark.ml.linalg.Vectors;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Encoders;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.SparkContext;

import java.util.List;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.JavaRDD;
public class App {
    public String getGreeting() {
        return "Hello World!";
    }
    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        SparkSession spark = SparkSession.builder().appName("CDX JSON Merge Job")
                .getOrCreate();
        Dataset<Row> csvDataset = spark.read().format("csv").option("header", "true")
                .load("src/main/resources/TrainingDataset.csv");
        csvDataset.createOrReplaceTempView("csvdataTable");
        Dataset<Row> reducedCSVDataset = spark.sql("select pH from csvdataTable limit 2 ");
        Dataset<String> rdds = reducedCSVDataset.toDF().select("VendorID").as(Encoders.STRING());
        List<String> listOfStrings = rdds.collectAsList();
        listOfStrings.forEach(x -> System.out.println(x));
//         SparkSession sp = SparkSession.builder().appName("Wine-Quality-Prediction").master("local")
//         .getOrCreate();

//         SparkConf conf = new SparkConf().setMaster("local").setAppName("Wine-Quality-Prediction");
//         System.out.println("Session Cereated:");
//        JavaSparkContext sc = new JavaSparkContext(conf);
//        String datapath= "src/main/resources/TrainingDataset.csv";
//        JavaRDD<String> data = sc.textFile(datapath);
        // Dataset<Row> training = sp.read().csv("src/main/resources/TrainingDataset.csv");
        // LinearRegression lr = new LinearRegression();
        // System.out.println("Dataset:"+data);
// Fit the model.
        // LinearRegressionModel lrModel = lr.fit(data);
// 
// Print the coefficients and intercept for linear regression.
        // System.out.println("Coefficients: "
                // + lrModel.coefficients() + " Intercept: " + lrModel.intercept());

// Summarize the model over the training set and print out some metrics.
        // LinearRegressionTrainingSummary trainingSummary = lrModel.summary();
        // System.out.println("numIterations: " + trainingSummary.totalIterations());
        // System.out.println("objectiveHistory: " + Vectors.dense(trainingSummary.objectiveHistory()));
        // trainingSummary.residuals().show();
        // System.out.println("RMSE: " + trainingSummary.rootMeanSquaredError());
        // System.out.println("r2: " + trainingSummary.r2());
        // sc.close();
    }
}
